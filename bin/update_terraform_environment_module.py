#!/usr/bin/env python3
import os
import sys
import json
import subprocess
from textwrap import dedent, indent


def get_az_account_subscription_id_tenant_id(account_name):
    for account in json.loads(subprocess.check_output(['az', 'account', 'list'])):
        if account['name'] == account_name:
            return account['id'], account['tenantId']


def get_remote_states(module_config, environment_name_prefix):
    remote_states = []
    for name in module_config.get('with_remote_states', []):
        remote_states.append(dedent(f"""
            data "terraform_remote_state" "{name}" {{
                backend = "azurerm"
                config = {{
                    resource_group_name = "{environment_name_prefix}-default"
                    storage_account_name = "{environment_name_prefix}secureblobs"
                    container_name = "{environment_name_prefix}-secure-blobs"
                    key = "{get_backend_storage_key(name)}"
                }}
            }}       
        """).strip())
    return "\n".join(remote_states).strip()


def get_backend_storage_key(module_name):
    return f'terraform.tfstate.{module_name}'


def main(environment_name, module_name, *args):
    local_backend = '--local-backend' in args
    print(f"Updating terraform environment '{environment_name}' module '{module_name}'")
    print(f"local_backend={local_backend}")
    environment_path = os.path.join('environments', environment_name)
    assert os.path.exists(os.path.join(environment_path, 'config.json'))
    environment_module_path = os.path.join(environment_path, module_name)
    os.makedirs(environment_module_path, exist_ok=True)
    module_path = os.path.join('modules', module_name)
    assert os.path.exists(os.path.join(module_path, 'module.tf.template'))
    with open(os.path.join(module_path, 'module.tf.template')) as f:
        module_tf_template = f.read()
    module_tf = module_tf_template.replace('__MODULES_PATH__', '../../../modules')
    with open(os.path.join(module_path, 'module.config.json')) as f:
        module_config = json.load(f)
    with_azuread = module_config.get('with_azuread', False)
    with_azuredevops = module_config.get('with_azuredevops', False)
    with_kubernetes = module_config.get('with_kubernetes', False)
    backend_storage_key = get_backend_storage_key(module_name)
    print(f'backend_storage_key: {backend_storage_key}')
    with open(os.path.join(environment_path, 'config.json')) as f:
        environment_config = json.load(f)
    environment_name_prefix = environment_config['name_prefix']
    subscription_id, tenant_id = get_az_account_subscription_id_tenant_id(environment_config['az_account_name'])
    print(f'subscription_id: {subscription_id}')
    print(f'tenant_id: {tenant_id}')
    backend = dedent(f"""
        backend "local" {{}}
    """).strip() if local_backend else dedent(f"""
        backend "azurerm" {{
          resource_group_name = "{environment_name_prefix}-default"
          storage_account_name = "{environment_name_prefix}secureblobs"
          container_name = "{environment_name_prefix}-secure-blobs"
          key = "{backend_storage_key}"
        }}
    """).strip()
    azuread_required_provider = dedent(f"""
        azuread = {{
          source  = "hashicorp/azuread"
          version = "={environment_config["terraform"]["azuread_provider_version"]}"
        }}
    """).strip() if with_azuread else ''
    azuread_provider = dedent(f"""
        provider "azuread" {{
          tenant_id = "{tenant_id}"
        }}
    """).strip() if with_azuread else ''
    azuredevops_required_provider = dedent(f"""
        azuredevops = {{
          source = "microsoft/azuredevops"
          version = "={environment_config["terraform"]["azuredevops_provider_version"]}"
        }}
    """).strip() if with_azuredevops else ''
    kubernetes_required_provider = dedent(f"""
            kubernetes = {{
              source  = "hashicorp/kubernetes"
              version = "={environment_config["terraform"]["kubernetes_provider_version"]}"
            }}
        """).strip() if with_kubernetes else ''
    kubernetes_provider = dedent(f"""
            provider "kubernetes" {{
              config_path = "~/.kube/config"
              config_context = "{environment_name_prefix}"
            }}
        """).strip() if with_kubernetes else ''
    remote_states = get_remote_states(module_config, environment_name_prefix)
    with open(os.path.join(environment_module_path, "main.tf"), "w") as f:
        f.write(dedent(f"""
            #
            # This file is automatically generated, do not edit it manually.
            #
            # The following command was used to generate this file:
            #   bin/update_terraform_environment_subdir.py {environment_name} {module_name} {' '.join(args)}
            #
            terraform {{
{indent(backend, '              ')}
              required_providers {{
                azurerm = {{
                  source  = "hashicorp/azurerm"
                  version = "={environment_config["terraform"]["azurerm_provider_version"]}"
                }}
{indent(azuread_required_provider, '                ')}
{indent(azuredevops_required_provider, '                ')}
{indent(kubernetes_required_provider, '                ')}
              }}
            }}
            
            provider "azurerm" {{
              subscription_id = "{subscription_id}"
              features {{}}
            }}
{indent(azuread_provider, '            ')}
{indent(kubernetes_provider, '            ')}
            
            locals {{
                name_prefix = "{environment_name_prefix}"
                location = "{environment_config['location']}"
            }}
            
{indent(module_tf, '            ')}
{indent(remote_states, '            ')}
        """).strip() + "\n")
    if not os.path.exists(os.path.join(environment_module_path, ".gitignore")):
        with open(os.path.join(environment_module_path, ".gitignore"), "w") as f:
            f.write(dedent(f"""
                .terraform/
                terraform.tfstate
                terraform.tfstate.backup
            """))


if __name__ == '__main__':
    main(*sys.argv[1:])
